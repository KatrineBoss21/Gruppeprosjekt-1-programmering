import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np

# Function to calculate the moving average
def moving_average(times, temps, n):
    avg_times = []
    avg_temps = []
    
    for i in range(n, len(temps) - n):
        avg_temp = np.mean(temps[i - n:i + n + 1])  # Calculate the average of the current window
        avg_times.append(times[i])  # Store the corresponding valid time
        avg_temps.append(avg_temp)  # Store the average temperature
    
    return avg_times, avg_temps

# Function to parse dates with multiple formats (same as given)
def parse_date(date_str, format_list):
    if isinstance(date_str, str):
        for fmt in format_list:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
    return pd.NaT

# Read data from CSV files
fil = pd.read_csv('trykk_og_temperaturlogg_rune_time.csv.txt', sep=';')
fil_2 = pd.read_csv('temperatur_trykk_met_samme_rune_time_datasett.csv.txt', sep=';')

# Convert columns to numeric values
fil['Temperatur (gr Celsius)'] = pd.to_numeric(fil['Temperatur (gr Celsius)'].str.replace(',', '.'), errors='coerce')
fil_2['Lufttemperatur'] = pd.to_numeric(fil_2['Lufttemperatur'].str.replace(',', '.'), errors='coerce')

# Handle date columns
fil['Dato og tid'] = fil['Dato og tid'].apply(lambda x: parse_date(x, ['%m.%d.%Y %H:%M', '%d.%m.%Y %H:%M']))
fil_2['Tid(norsk normaltid)'] = fil_2['Tid(norsk normaltid)'].apply(lambda x: parse_date(x, ['%d.%m.%Y %H:%M']))

# Remove rows with NaN
fil.dropna(subset=['Dato og tid', 'Temperatur (gr Celsius)'], inplace=True)
fil_2.dropna(subset=['Lufttemperatur', 'Tid(norsk normaltid)'], inplace=True)

# Define the time range for temperature fall
start_time = datetime(2021, 6, 11, 17, 31)
end_time = datetime(2021, 6, 12, 3, 5)

# Find the data closest to the start and end time in 'fil'
start_data = fil.loc[fil['Dato og tid'] == fil['Dato og tid'].iloc[(fil['Dato og tid'] - start_time).abs().argsort()[0]]]
end_data = fil.loc[fil['Dato og tid'] == fil['Dato og tid'].iloc[(fil['Dato og tid'] - end_time).abs().argsort()[0]]]

# Extract temperature values at the start and end points
start_temp = start_data['Temperatur (gr Celsius)'].values[0]
end_temp = end_data['Temperatur (gr Celsius)'].values[0]

# Interpolate meteorological data (MET dataset)
fil_2_interpolated = pd.DataFrame({
    'Tid(norsk normaltid)': pd.to_datetime(fil_2['Tid(norsk normaltid)']),
    'Lufttemperatur': fil_2['Lufttemperatur']
}).set_index('Tid(norsk normaltid)').resample('10S').interpolate()

# Apply moving average to temperature data with n=30
n = 30
avg_times, avg_temps = moving_average(fil['Dato og tid'].values, fil['Temperatur (gr Celsius)'].values, n)


plt.figure(figsize=(14, 6))
plt.plot(fil['Dato og tid'], fil['Temperatur (gr Celsius)'], label='Temperatur', color='blue')
plt.plot(avg_times, avg_temps, label=f'Gjennomsnitt', color='orange')
plt.plot(fil_2_interpolated.index, fil_2_interpolated['Lufttemperatur'], label='Lufttemperatur MET', color='green')
plt.plot([start_time, end_time], [start_temp, end_temp], label='Temperaturfall', color='purple',)
plt.xlabel('Tid')
plt.ylabel('Temperatur (Celsius)')
plt.title('Temperatur endring 11 - 14')
plt.xticks(rotation=45)
plt.legend()
plt.show()

